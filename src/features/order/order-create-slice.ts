import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'
import { RootState } from 'app/store'
import axios from 'axios'
import orderApi from 'api/order-api'
import { selectUserDetail } from 'features/auth/user-login-slice'
import { CreateOrderError, CreateOrderFormData } from 'models/api'
import { OrderCreateState } from 'models/features'
import { validateToken } from 'features/validateToken'

const initialState: OrderCreateState = {
  orderCreateResponse: {},
  status: 'idle',
  failureDescription: '',
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const createOrderAsync = createAsyncThunk(
  'orderCreate/createOrder',
  async (data: CreateOrderFormData, {dispatch, getState, rejectWithValue }) => {
    try {
      const userDetail = selectUserDetail(getState() as RootState)
      validateToken(userDetail, dispatch)
      data.startDate = data.startDate.split('-').join('')
      data.endDate = data.endDate.split('-').join('')
      const response = await orderApi.createInsuranceOrder(data, userDetail)
      return response
    } catch (error) {
      if (axios.isAxiosError(error)) {
        if (!error.response) {
          throw error
        }
        return rejectWithValue(error.response.data)
      } else {
        // do something else
        // or creating a new error
        throw error
      }
    }
  }
)

const orderCreateSlice = createSlice({
  name: 'orderCreate',
  initialState,
  reducers: {
    resetOrderCreate: handleResetAction,
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(createOrderAsync.pending, (state: OrderCreateState) => {
        return {
          orderCreateResponse: {},
          status: 'loading',
          failureDescription: '',
        }
      })
      .addCase(createOrderAsync.fulfilled, (state: OrderCreateState, action) => {
        return {
          orderCreateResponse: action.payload,
          status: 'idle',
          failureDescription: '',
        }
      })
      .addCase(createOrderAsync.rejected, (state: OrderCreateState, action) => {
        return {
          orderCreateResponse: {},
          status: 'failed',
          failureDescription: (action.payload as CreateOrderError).description,
        }
      })
  },
})

function handleResetAction(state: OrderCreateState) {
  state.orderCreateResponse = {}
  state.status = 'idle'
  state.failureDescription = ''
}

export const { resetOrderCreate } = orderCreateSlice.actions

export const selectOrderCreateResponse = (state: RootState) => state.orderCreate.orderCreateResponse
export const selectStatus = (state: RootState) => state.orderCreate.status
export const selectFailureDescription = (state: RootState) =>
  state.orderCreate.failureDescription

export const orderCreateReducer = orderCreateSlice.reducer
