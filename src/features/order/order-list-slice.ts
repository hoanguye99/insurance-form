import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit'
import { RootState } from 'app/store'
import axios from 'axios'
import {OrderListState } from 'models/features'
import orderApi from 'api/order-api'
import { selectUserDetail } from 'features/auth/user-login-slice'

const initialState: OrderListState = {
  orderList: localStorage.getItem('orderList')
    ? JSON.parse(localStorage.getItem('orderList')!)
    : {},
  status: 'idle',
  failureDescription: ''
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const getAllOrdersAsync = createAsyncThunk(
  'orderList/getAllOrders',
  async (data, {getState, rejectWithValue }) => {
    try {
      console.log('calling get orders')
      const userDetail = selectUserDetail(getState() as RootState)
      const response = await orderApi.getAllInsuranceOrders(userDetail)
      localStorage.setItem('orderList', JSON.stringify(response))
      return response
    } catch (error) {
      if (axios.isAxiosError(error)) {
        if (!error.response) {
          throw error
        }

        return rejectWithValue(error.response.data)
      } else {
        // do something else
        // or creating a new error
        throw new Error('different error than axios')
      }
    }
  }
)

const orderListSlice = createSlice({
  name: 'orderList',
  initialState,
  reducers: {
    resetOrderList: handleResetAction,
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(getAllOrdersAsync.pending, (state: OrderListState) => {
        state.status = 'loading'
      })
      .addCase(getAllOrdersAsync.fulfilled, (state: OrderListState, action) => {
        return {
          orderList: action.payload,
          status: 'idle',
          failureDescription: ''
        }
      })
      .addCase(getAllOrdersAsync.rejected, (state: OrderListState, action) => {
        return {
          orderList: {},
          status: 'failed',
          failureDescription: 'GET API getAllInsuranceOrders Failure',
        }
      })
  },
})

function handleResetAction(state: OrderListState) {
  localStorage.removeItem('orderList')
  state.orderList = {}
  state.status = 'idle'
  state.failureDescription = ''
}

export const { resetOrderList } = orderListSlice.actions

export const selectOrderList = (state: RootState) => state.orderList.orderList
export const selectStatus = (state: RootState) => state.orderList.status
export const selectFailureDescription = (state: RootState) =>
  state.orderList.failureDescription

export const orderListReducer = orderListSlice.reducer
