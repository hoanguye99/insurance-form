import { createAsyncThunk, createSlice } from '@reduxjs/toolkit'
import imageUploadApi from 'api/image-upload-api'
import { RootState } from 'app/store'
import axios from 'axios'
import { ImageUploadState } from 'models/features'

const initialState: ImageUploadState = {
  imageUploadResponse: undefined,
  status: 'idle',
  failureDescription: '',
}

// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.
export const uploadImageAsync = createAsyncThunk(
  'imageUpload/uploadImageAsync',
  async (file: File, {rejectWithValue }) => {
    try {
      const response = await imageUploadApi.upload(file)
      return response
    } catch (error) {
      if (axios.isAxiosError(error)) {
        if (!error.response) {
          throw error
        }
        return rejectWithValue(error.response.data)
      } else {
        // do something else
        // or creating a new error
        throw error
      }
    }
  }
)

const imageUploadSlice = createSlice({
  name: 'imageUpload',
  initialState,
  reducers: {
    resetImageUpload: handleResetAction,
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(uploadImageAsync.pending, (state: ImageUploadState) => {
        return {
          imageUploadResponse: undefined,
          status: 'loading',
          failureDescription: '',
        }
      })
      .addCase(uploadImageAsync.fulfilled, (state: ImageUploadState, action) => {
        return {
          imageUploadResponse: action.payload,
          status: 'idle',
          failureDescription: '',
        }
      })
      .addCase(uploadImageAsync.rejected, (state: ImageUploadState, action) => {
        return {
          imageUploadResponse: undefined,
          status: 'failed',
          failureDescription: JSON.stringify(action.payload as Object),
        }
      })
  },
})

function handleResetAction(state: ImageUploadState) {
  state.imageUploadResponse = undefined
  state.status = 'idle'
  state.failureDescription = ''
}

export const { resetImageUpload } = imageUploadSlice.actions

export const selectImageUploadResponse = (state: RootState) => state.imageUpload.imageUploadResponse
export const selectStatus = (state: RootState) => state.imageUpload.status
export const selectFailureDescription = (state: RootState) =>
  state.imageUpload.failureDescription

export const imageUploadReducer = imageUploadSlice.reducer
